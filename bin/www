#!/usr/bin/env node

/**
 * Module dependencies.
 */

var http    = require('http');
var async   = require('async');
var debug   = require('debug')('osmbc:server');


var app     = require('../app');

var config  = require('../config.js');


var configModule = require('../model/config.js');
var blogModule = require('../model/blog.js');
var userModule = require('../model/user.js');
var messageCenter = require('../notification/messageCenter.js');
var mailReceiver  = require('../notification/mailReceiver.js');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || config.getServerPort());
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
function initialiseServer() {
  debug('initialiseServer');
  async.auto({
    blogModule:startBlogTimer,
    messageCenter:messageCenter.initialise,
    startMailReceiver:startMailReceiver,
    configModule:configModule.initialise

},
    function(err){
      if (err) {
        console.log(err);
        process.exit(1);
        return;
      }
      server.listen(port);
      server.on('error', onError);
      server.on('listening', onListening);
      console.log("Server Listening on port "+port);
  })
}

initialiseServer();


// Initialise Mail Module with all users
function startMailReceiver(callback) {
  debug("startMailReceiver");
  userModule.find({access:"full"},function initUsers(err,result) {
    if (err) {
      return callback(new Error("Error during User Initialising for Mail "+err.message));
    }
    mailReceiver.initialise(result);
    console.log("Mail Receiver initialised.");
    return callback();
  });
}

function startBlogTimer(callback) {
  debug("startBlogTimer");
  blogModule.startAllTimers(function (err) {
    if (err) {
      return callback(new Error("Error during Blog Timers Start "+err.message));
    }
    console.log("Timer for Auto Close started");
    return callback();
  });
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
